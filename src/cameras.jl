# Raytracer.jl
# Raytracing for the generation of photorealistic images in Julia
# (C) 2021 Samuele Colombo, Paolo Galli
#
# file:
#   cameras.jl
# description:
#   Implementation of the Camera abstract type and the two derivating
#   concrete types, OrthogonalCamera and PerspectiveCamera

# TODO check docstrings


"""
    Camera

An abstract type representing an observer.
"""
abstract type Camera end


"""
    OrthogonalCamera

A camera implementing an orthogonal 3D → 2D projection.

This type implements an observer seeing the world through an orthogonal projection.

Members:
- `aspect_ratio` ([`Real`](@ref)): defines how larger than the height is the image (16/9, 4/3, ...),
you can use julia rational like `16//9`.
- `transformation` ([`Transformation`](@ref)): define the transformation applied to the rays generated by the camera.
"""
Base.@kwdef struct OrthogonalCamera <: Camera
    aspect_ratio::Real = 1
    transformation::Transformation = Transformation{Bool}()
end


"""
    PerspectiveCamera

A camera implementing a perspective 3D → 2D projection.

This type implements an observer seeing the world through a perspective projection.

Members:
- `aspect_ratio` ([`Real`](@ref)): defines how larger than the height is the image (16/9, 4/3, ...), 
you can use julia rational like `16//9`.
- `transformation` ([`Transformation`](@ref)): define the transformation applied to the rays generated by the camera.
- `screen_distance` ([`Real`](@ref)): tells how much far from the eye of the observer is the screen
and it influences the FOV.
"""
Base.@kwdef struct PerspectiveCamera <: Camera
    aspect_ratio::Real = 1
    transformation::Transformation = Transformation{Bool}()
    screen_distance::Real = 1
end


#####################################################################


"""
    fire_ray(camera, u, v, T = Float32)

Fire a [`Ray`](@ref) through the [`Camera`](@ref) at a position (u,v) on the screen.

Parameters `u` and `v` are bound between `0` and `1`:

    (0, 1)                            (1, 1)
        +------------------------------+
        |                              |
        |                              |
        |                              |
        +------------------------------+
    (0, 0)                            (1, 0)

Type parameter `T` is passed onto the [`Ray`](@ref) constructor. Default type is `Float64`.
"""
function fire_ray(camera::OrthogonalCamera, u, v; T::Type{<:AbstractFloat} = Float64)
    camera.transformation * Ray{T}(Point{T}(-1., (1. - 2u) * camera.aspect_ratio, 2v - 1.),
                                   vec_x(T),
                                   tmin = one(T))
end

function fire_ray(camera::PerspectiveCamera, u, v; T::Type{<:AbstractFloat} = Float64)
    camera.transformation * Ray{T}(Point{T}(-camera.screen_distance, 0., 0.),
                                   Vec{T}(camera.screen_distance, (1. - 2u) * camera.aspect_ratio, 2v - 1.),
                                   tmin = one(T))
end


"""
    aperture_deg(camera)

Compute the FOV of the camera in degrees. `camera` must be a [`PerspectiveCamera`](@ref) instance.
"""
aperture_deg(camera::PerspectiveCamera) = 2 * rad2deg(atan(camera.screen_distance, camera.aspect_ratio))
